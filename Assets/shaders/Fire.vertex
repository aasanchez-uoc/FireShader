#version 330 core

layout (location = 0) in vec3 LVertexPos;
layout (location = 1) in vec2 texCoor;
layout (location = 2) in vec3 ColorVertex;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 camPos;

out vec3 cameraVector;
out	vec2 texFragment;
out	vec3 colorFragment;
out	vec4 clipSpace;

void main(){
	mat4 modelView = view * model;

	//modificamos manualmente la matriz de rotación para que siempre esté orientado hacia la cámara en el eje xz
	modelView[0][0] = 1;
	modelView[0][1] = 0;
	modelView[0][2] = 0;

	modelView[2][0] = 0;
	modelView[2][1] = 0;
	modelView[2][2] = 1;

	vec4 modelPosition = model * vec4( LVertexPos.xyz, 1 );
	
	clipSpace = projection * modelView * vec4( LVertexPos.xyz, 1 );
	gl_Position = clipSpace;

	texFragment = texCoor;
	colorFragment = ColorVertex;

	cameraVector = camPos - modelPosition.xyz;
}

